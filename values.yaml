image:
  repository: grafana/grafana
  registry: docker.io
  tag: latest
  pullPolicy: IfNotPresent

plugins:
    - kirilldata


extraVolumes:
  - name: my-plugin
    emptyDir: {}  # Or use a PersistentVolumeClaim if needed
extraVolumeMounts:
  - name: my-plugin
    mountPath: /var/lib/grafana/plugins/my-plugin

      # Optionally, configure Grafana to start with a custom datasource automatically
datasources:
   datasource.yaml:
     apiVersion: 1
     datasources:  
     - name: kirilldata
       type: datasource
       url: http://localhot:3000/api/health/
       access: proxy
       isDefault: true
      # Here you can configure the datasource using a .yaml file
      # Example: Adding a custom data source
      # Add the file `datasource.yaml` with the necessary configurations
      # in your Kubernetes setup (more details below)



# For Kubernetes Service configuration
service:
  type: LoadBalancer  # Or NodePort if you are using Minikube or a local cluster
  port: 3000
  
resources: 
  limits:
    cpu: 2
    memory: 4Gi
  requests:
    cpu: 1
    memory: 2Gi

readinessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 5

grafana.ini:
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning  

initChownData:
  ## If false, data ownership will not be reset at startup
  ## This allows the grafana-server to be run with an arbitrary user
  ##
  enabled: false    